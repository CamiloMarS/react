--- CICLO DE VIDA DE UNCOMPONENTE DE REACT ---
* Constructor 
    Metodo llamado antes de que el componente sea montado (el componente aun no se ve)
    Aqui podemos INICIALIZAR EL ESTADO, enlazar BIND de eventos, 
    Es el primer metodo que se llama al instancia el componente

* componentWillMount
    Metodo que se llama inmediatamente antes de que el componente se vaya a montar
    (el componente aun no se ve)
    Aqui podemos hacer el SetState()
    No hacer llamadas a API o una subscripcion a eventos.

* render
    Contiene todos los elementos a renderizar (estructura del componente)
    Contiene el JSX en el return 
    Puede calcular propiedades: nComponent = val1 + val2;

* componentDidMount
    Método llamado luego de montarse el componente (el componente ya esta en la pantalla)
    Solo se lanza una vez
    Enlazar bind de eventos
    Es el primer metodo que se llama al instancia un componente
    Aqui hacer llamadasa  las API

-- Actualización del componente

* componentWillReceiveProps
    Metodo llamado al recibir nuevas propiedades
    Siver para actualizar el estado con base a las nuevas propiedades.

* shouldComponentUpdate
    Metodo que condiciona si el componente se vuelve a renderizar
    Utilizado para optimizar el rendimiento.

* componenteWillUpdate
    Método llamado antes de re-renderizar un componente
    Utilizado para optimizar el rendimiento.

* render
    re-render

* componentDidUpdate
    Metodo llamado luego del re-render

-- Desmontado del componente

* componentWillUnmount
    Metodo llamado antes que el componente sea retirado de la aplicación

----- MANEJO DE ERRORES REACT 6 -------
    Prevenir que los errores quiebren la aplicación

* componentDidCatch
    Sí ocurre algún error al renderizar algún componente este metodo es invocado.
    El manejo de errores solo ocurre en componentes hijos.


    =============================>  TIPOS DE COMPONENTES  <==============================
    * Componentes normales

    * PureComponents 
        {PureComponent } from 'reac';
        shouldComponentUpdate --> Valida las propiedades, para mejorar el rendimiento 

    * Functionally Component 
        No tiene ciclo de vida

    ¿Cómo usar uno y cuando otro?
        * "Como se ve" ---> Son los componentes tontos, o presentacional.
            1.- puede contener smart componentes u otros componentes de UI.
            2.- permite composicion con props.children "poner componentes dentro de otro"
            3.- No dependen del resto de la app.
            4.- No específica como los datos son cargados o mutado
            5.- Recibe datos y callbacks solo con propiedades
            6.- Rara vez tiene su propio estado
            7.- Están escritos como componentes funcionales a menos que necesiten mejoras de performance. 

        * "Qué hace?"  ---> Son los componentes inteligentes, llamados Smart
            Containers 
                1.- Concentrado en el funcionamiento de la aplicación
                2.- Contienen componentes de UI u otros containers
                3.- No tienen estilos
                4.- Proveen de datos a componentes de UI u otros contenedores
                5.- Proveen de callbacks  a la UI
                6.- Normalmente tienen "estado"
                7.- Llaman acciones
                8.- Generados por higher order componentes
                